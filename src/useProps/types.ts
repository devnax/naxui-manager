import * as CSS from 'csstype'
import { CSSProps } from 'naxcss';
import { ThemeOptions } from '../theme';
import { AliasesTypes } from "../css/types"
import { ColorsRefTypes, BreakpointsType, ShadowRefTyeps, TypographyRefTypes } from '../theme/types';
type ValueType<T extends keyof CSS.Properties> = CSS.Properties[T] | ThemeOptions['breakpoints'] | number

interface CSSProperties {
    alignContent: ValueType<"alignContent">;
    alignItems: ValueType<"alignItems">;
    alignSelf: ValueType<"alignSelf">;
    animation: ValueType<"animation">;
    animationComposition: ValueType<"animationComposition">;
    animationDelay: ValueType<"animationDelay">;
    animationDirection: ValueType<"animationDirection">;
    animationDuration: ValueType<"animationDuration">;
    animationFillMode: ValueType<"animationFillMode">;
    animationIterationCount: ValueType<"animationIterationCount">;
    animationName: ValueType<"animationName">;
    animationTimingFunction: ValueType<"animationTimingFunction">;
    backdropFilter: ValueType<"backdropFilter">;
    background: ValueType<"background">;
    backgroundAttachment: ValueType<"backgroundAttachment">;
    backgroundColor: ValueType<"backgroundColor">;
    backgroundImage: ValueType<"backgroundImage">;
    backgroundOrigin: ValueType<"backgroundOrigin">;
    backgroundPosition: ValueType<"backgroundPosition">;
    backgroundRepeat: ValueType<"backgroundRepeat">;
    backgroundSize: ValueType<"backgroundSize">;
    border: ValueType<"border">;
    borderBottom: ValueType<"borderBottom">;
    borderBottomColor: ValueType<"borderBottomColor">;
    borderBottomStyle: ValueType<"borderBottomStyle">;
    borderBottomWidth: ValueType<"borderBottomWidth">;
    borderColor: CSS.Properties['borderColor'] | ColorsRefTypes;
    borderImage: ValueType<"borderImage">;
    borderLeft: ValueType<"borderLeft">;
    borderLeftColor: ValueType<"borderLeftColor">;
    borderLeftStyle: ValueType<"borderLeftStyle">;
    borderLeftWidth: ValueType<"borderLeftWidth">;
    borderRadius: ValueType<"borderRadius">;
    borderRight: ValueType<"borderRight">;
    borderRightColor: ValueType<"borderRightColor">;
    borderRightStyle: ValueType<"borderRightStyle">;
    borderRightWidth: ValueType<"borderRightWidth">;
    borderStyle: ValueType<"borderStyle">;
    borderTop: ValueType<"borderTop">;
    borderTopColor: ValueType<"borderTopColor">;
    borderTopLeftRadius: ValueType<"borderTopLeftRadius">;
    borderTopRightRadius: ValueType<"borderTopRightRadius">;
    borderTopStyle: ValueType<"borderTopStyle">;
    borderTopWidth: ValueType<"borderTopWidth">;
    borderWidth: ValueType<"borderWidth">;
    bottom: ValueType<"bottom">;
    boxShadow: ValueType<"boxShadow"> | ShadowRefTyeps;
    boxSizing: ValueType<"boxSizing">;
    cursor: ValueType<"cursor">;
    color: CSS.Properties['color'] | ColorsRefTypes;
    display: ValueType<"display">;
    direction: ValueType<"direction">;
    filter: ValueType<"filter">;
    flex: ValueType<"flex">;
    flexBasis: ValueType<"flexBasis">;
    flexDirection: ValueType<"flexDirection">;
    flexFlow: ValueType<"flexFlow">;
    flexGrow: ValueType<"flexGrow">;
    flexShrink: ValueType<"flexShrink">;
    flexWrap: ValueType<"flexWrap">;
    float: ValueType<"float">;
    fontFamily: ValueType<"fontFamily"> | "default-font-family";
    fontSize: ValueType<"fontSize"> | TypographyRefTypes | "default-font-size";
    fontStyle: ValueType<"fontStyle">;
    fontWeight: ValueType<"fontWeight">;
    gap: ValueType<"gap">;
    grid: ValueType<"grid">;
    gridArea: ValueType<"gridArea">;
    gridAutoColumns: ValueType<"gridAutoColumns">;
    gridAutoFlow: ValueType<"gridAutoFlow">;
    gridAutoRows: ValueType<"gridAutoRows">;
    gridColumn: ValueType<"gridColumn">;
    gridColumnEnd: ValueType<"gridColumnEnd">;
    gridColumnGap: ValueType<"gridColumnGap">;
    gridColumnStart: ValueType<"gridColumnStart">;
    gridGap: ValueType<"gridGap">;
    gridRow: ValueType<"gridRow">;
    gridRowEnd: ValueType<"gridRowEnd">;
    gridRowGap: ValueType<"gridRowGap">;
    gridRowStart: ValueType<"gridRowStart">;
    gridTemplate: ValueType<"gridTemplate">;
    gridTemplateAreas: ValueType<"gridTemplateAreas">;
    gridTemplateColumns: ValueType<"gridTemplateColumns">;
    gridTemplateRows: ValueType<"gridTemplateRows">;
    height: ValueType<"height"> | BreakpointsType;
    justifyContent: ValueType<"justifyContent">;
    justifyItems: ValueType<"justifyItems">;
    justifySelf: ValueType<"justifySelf">;
    left: ValueType<"left">;
    letterSpacing: ValueType<"letterSpacing">;
    lineBreak: ValueType<"lineBreak">;
    lineHeight: ValueType<"lineHeight">;
    listStyle: ValueType<"listStyle">;
    margin: ValueType<"margin">;
    marginBlock: ValueType<"marginBlock">;
    marginBlockEnd: ValueType<"marginBlockEnd">;
    marginBlockStart: ValueType<"marginBlockStart">;
    marginBottom: ValueType<"marginBottom">;
    marginInline: ValueType<"marginInline">;
    marginInlineEnd: ValueType<"marginInlineEnd">;
    marginInlineStart: ValueType<"marginInlineStart">;
    marginLeft: ValueType<"marginLeft">;
    marginRight: ValueType<"marginRight">;
    marginTop: ValueType<"marginTop">;
    maxHeight: ValueType<"maxHeight"> | BreakpointsType;
    maxWidth: ValueType<"maxWidth"> | BreakpointsType;
    minHeight: ValueType<"minHeight"> | BreakpointsType;
    minWidth: ValueType<"minWidth"> | BreakpointsType;
    objectFit: ValueType<"objectFit">;
    objectPosition: ValueType<"objectPosition">;
    opacity: ValueType<"opacity">;
    order: ValueType<"order">;
    outline: ValueType<"outline">;
    overflow: ValueType<"overflow">;
    overflowX: ValueType<"overflowX">;
    overflowY: ValueType<"overflowY">;
    padding: ValueType<"padding">;
    paddingBlock: ValueType<"paddingBlock">;
    paddingBlockEnd: ValueType<"paddingBlockEnd">;
    paddingBlockStart: ValueType<"paddingBlockStart">;
    paddingBottom: ValueType<"paddingBottom">;
    paddingInline: ValueType<"paddingInline">;
    paddingInlineEnd: ValueType<"paddingInlineEnd">;
    paddingInlineStart: ValueType<"paddingInlineStart">;
    paddingLeft: ValueType<"paddingLeft">;
    paddingRight: ValueType<"paddingRight">;
    paddingTop: ValueType<"paddingTop">;
    perspective: ValueType<"perspective">;
    perspectiveOrigin: ValueType<"perspectiveOrigin">;
    pointerEvents: ValueType<"pointerEvents">;
    position: ValueType<"position">;
    right: ValueType<"right">;
    textAlign: ValueType<"textAlign">;
    textDecoration: ValueType<"textDecoration">;
    textShadow: ValueType<"textShadow">;
    textTransform: ValueType<"textTransform">;
    top: ValueType<"top">;
    transform: ValueType<"transform">;
    transformOrigin: ValueType<"transformOrigin">;
    transformStyle: ValueType<"transformStyle">;
    transition: ValueType<"transition">;
    transitionDelay: ValueType<"transitionDelay">;
    transitionDuration: ValueType<"transitionDuration">;
    transitionProperty: ValueType<"transitionProperty">;
    transitionTimingFunction: ValueType<"transitionTimingFunction">;
    translate: ValueType<"translate">;
    userSelect: ValueType<"userSelect">;
    verticalAlign: ValueType<"verticalAlign">;
    visibility: ValueType<"visibility">;
    whiteSpace: ValueType<"whiteSpace">;
    width: ValueType<"width"> | BreakpointsType;
    wordBreak: ValueType<"wordBreak">;
    wordSpacing: ValueType<"wordSpacing">;
    wordWrap: ValueType<"wordWrap">;
    zIndex: ValueType<"zIndex">;
}

export type CSSPropAsAttr = Partial<CSSProperties> & AliasesTypes & {
    sx?: CSSProps;
    hover?: CSSProps;
    typography?: keyof ThemeOptions['typography'];
}